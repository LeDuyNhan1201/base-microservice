server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /profile
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      force-request: true
      force-response: true

gateway:
  domain: ${GATEWAY_DOMAIN:localhost}
  port: ${GATEWAY_PORT:8888}

resilience4j:
  circuitbreaker:
    instances:
      identityService:
        registerHealthIndicator: true  # Đăng ký health indicator cho Actuator
        slidingWindowSize: 10          # Kích thước cửa sổ trượt
        failureRateThreshold: 50       # Ngưỡng phần trăm lỗi để mở Circuit Breaker
        waitDurationInOpenState: 10000 # Thời gian đợi khi Circuit Breaker ở trạng thái mở (mili giây)
        permittedNumberOfCallsInHalfOpenState: 3 # Số cuộc gọi được phép khi ở trạng thái half-open
        minimumNumberOfCalls: 5        # Số lượng tối thiểu các cuộc gọi trước khi tính toán lỗi
        automaticTransitionFromOpenToHalfOpenEnabled: true # Tự động chuyển từ trạng thái open sang half-open

      fileService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true

  timelimiter:
    instances:
      identityService:
        timeoutDuration: 1s

      fileService:
        timeoutDuration: 1s

  retry:
    instances:
      fileService:
        maxAttempts: 3
        waitDuration: 1s

eureka:
  instance:
    hostname: ${SERVER_HOST:localhost}

  client:
    service-url:
      defaultZone: http://${SERVER_HOST:localhost}:${EUREKA_PORT:8761}/eureka

#_______________________________________JWT_______________________________________
jwt:
  accessSignerKey: ${ACCESS_SIGNER_KEY}

#_______________________________________GRPC_______________________________________
grpc:
  server:
    port: ${GRPC_PORT:10003}

#  client:
#    file-service:
#      address: static://localhost:10004
#      negotiationType: plaintext

#_______________________________________LOGGING_______________________________________
logging:
  pattern:
    correlation: "[${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    org:
      springframework:
        security: DEBUG

#_______________________________________MANAGEMENT_______________________________________
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus
  endpoint:
    health:
      show-details: always

  info:
    git:
      enabled: true
      mode: full

  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}

  observations:
    key-values:
      application: ${spring.application.name}

  tracing:
    sampling:
      probability: 1.0

#_______________________________________API DOCUMENT_______________________________________
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui
  show-actuator: true

openapi:
  service:
    api-docs: profile-service-rest-api
    title: Profile Service REST API
    description: This is the API documentation for Identity Service.
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path}
    server-description: Infinity Net Backend API service For Development

#_______________________________________COMMON_______________________________________
spring:
  config:
    import: file:env.properties

  profiles:
    active: dev

  application:
    name: profile-service

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
    cache-duration: 3600

#_______________________________________DATABASE_______________________________________
  datasource:
    username: ${MYSQL_USER:ben1201}
    password: ${MYSQL_PASSWORD:Ben1201#}
    url: jdbc:mysql://localhost:3306/${MYSQL_DB:profile_service_db}?createDatabaseIfNotExist=true
    hikari:
      driver-class-name: com.mysql.cj.jdbc.Driver
      maximum-pool-size: 10

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  debezium:
    connectors:
      - name: profile-service-mysql-connector
        config:
          connector.class: io.debezium.connector.mysql.MySqlConnector
          tasks.max: 1
          database.hostname: base-microservice-profile-service-mysql
          database.port: 3306
          database.user: ${MYSQL_USER:ben1201}
          database.password: ${MYSQL_PASSWORD:Ben1201#}
          database.server.id: 1
          database.server.name: profile-service-mysql-db
          database.include.list: ${MYSQL_DB:profile_service_db}
          topic.prefix: profile-service
          schema.history.internal.kafka.bootstrap.servers: ${INTERNAL_KAFKA_BOOTSTRAP_SERVERS:base-microservice-kafka-broker:9092}
          schema.history.internal.kafka.topic: schema-changes.profile_service_db

  #_______________________________________REDIS_______________________________________
  cache:
    type: redis

  data:
    redis:
      port: ${REDIS_PORT:6379}
      host: ${REDIS_HOST:localhost}
      database: 0

#    elasticsearch:
#      cluster-names: docker-cluster
#      cluster-node: localhost:9200
#      repositories:
#        enabled: true
#      auto-index-creation: true

#_______________________________________KAFKA_______________________________________
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}
#    listener:
#      ack-mode: manual
#      client-id: profile-service

    properties:
      security.protocol: SSL
#      sasl.mechanism: PLAIN
#      sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="ben1201" password="Ben1201#" user_ben1201="Ben1201#";
      ssl.truststore.location: profile-service/certs/profile.truststore.jks
      ssl.truststore.password: ${PROFILE_PASSWORD}
      ssl.keystore.location: profile-service/certs/profile.keystore.jks
      ssl.keystore.password: ${PROFILE_PASSWORD}
      ssl.key.password: ${PROFILE_PASSWORD}

      schema:
        registry:
          url: http://${SCHEMA_REGISTRY_URL:localhost:8081}

    identity-consumer:
      group-id: identity-to-profile-group
